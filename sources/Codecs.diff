diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/AudioCodec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/AudioCodec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/AudioCodec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/AudioCodec.cpp	2020-05-03 14:58:22.869928748 +0200
@@ -11,7 +11,7 @@
 		: Codec(codecName)
 	{
 #ifdef DEBUG
-            std::cout << "codecName =  "<< codecName << "\n";
+            std::cout << "Audio codecName =  "<< codecName << "\n";
 #endif
 	}
 
@@ -19,7 +19,9 @@
 		: Codec(codecId)
 	{
 #ifdef DEBUG
-            std::cout << "codecId =  "<< codecId << "\n";
+            const char * codec_name = avcodec_get_name(codecId);
+            std::cout << "(step 8) codec name :  "<< codec_name << "\n";
+            std::cout << "(step 9) codecId =  "<< codecId << "\n";
 #endif
 
 	}
@@ -29,10 +31,13 @@
 	}
 
 	// check that a given sample format is supported by the encoder
-        /*
+        
         // FIXME : unused
+        /*
+
 	static int check_sample_fmt(const AVCodec *codec, enum AVSampleFormat sample_fmt)
 	{
+		AVCodec * codec = avcodec_get_name(codecId);
 		const enum AVSampleFormat *p = codec->sample_fmts;
 
 		while (*p != AV_SAMPLE_FMT_NONE)
@@ -92,7 +97,7 @@
 	bool AudioCodec::IsChannelsSupported(int channels)
 	{
 		unsigned long int channelLayout = av_get_default_channel_layout(channels);
-		const uint64_t *p = codecContext->codec->channel_layouts;
+		const uint64_t *p = m_codecContext->codec->channel_layouts;
 		while (*p)
 		{
 			if (channelLayout == *p) return true;
@@ -103,7 +108,7 @@
 
 	bool AudioCodec::IsFormatSupported(AVSampleFormat format)
 	{
-		const enum AVSampleFormat *p = codecContext->codec->sample_fmts;
+		const enum AVSampleFormat *p = m_codecContext->codec->sample_fmts;
 
 		while (*p != AV_SAMPLE_FMT_NONE)
 		{
@@ -116,8 +121,8 @@
 	bool AudioCodec::IsSampleRateSupported(int sampleRate)
 	{
 		const int *p;
-		if (!codecContext->codec->supported_samplerates) return true; // all sample rates are fair game
-		p = codecContext->codec->supported_samplerates;
+		if (!m_codecContext->codec->supported_samplerates) return true; // all sample rates are fair game
+		p = m_codecContext->codec->supported_samplerates;
 		while (*p)
 		{
 			if (*p == sampleRate) return true;
@@ -128,13 +133,13 @@
 
 	AVSampleFormat AudioCodec::GetDefaultSampleFormat()
 	{
-		AVSampleFormat format = (codecContext->codec->sample_fmts ? codecContext->codec->sample_fmts[0] : AV_SAMPLE_FMT_FLTP);
+		AVSampleFormat format = (m_codecContext->codec->sample_fmts ? m_codecContext->codec->sample_fmts[0] : AV_SAMPLE_FMT_FLTP);
 		return format;
 	}
 
 	int AudioCodec::GetDefaultSampleRate()
 	{
-		return select_sample_rate(codecContext->codec);
+		return select_sample_rate(m_codecContext->codec);
 	}
 
 	OpenCodec* AudioCodec::Open(int bitRate, AVSampleFormat format, int sampleRate)
@@ -143,25 +148,25 @@
         std::cout << "I'm at  : " << __FILE__ << __func__ << " bitRate : " << bitRate << " format : "  << format << "sampleRate : " << sampleRate << "\n";
 #endif
 		// do some sanity checks
-		if (!IsFormatSupported(format)) throw FFmpegException(std::string("Sample format " + string(av_get_sample_fmt_name(format)) + " is not supported by codec " + codecContext->codec->name).c_str());
-		if (!IsSampleRateSupported(sampleRate)) throw FFmpegException(std::string("Sample rate " + to_string(sampleRate) + " is not supported by codec " + codecContext->codec->name).c_str());
+		if (!IsFormatSupported(format)) throw FFmpegException(std::string("Sample format " + string(av_get_sample_fmt_name(format)) + " is not supported by codec " + m_codecContext->codec->name).c_str());
+		if (!IsSampleRateSupported(sampleRate)) throw FFmpegException(std::string("Sample rate " + to_string(sampleRate) + " is not supported by codec " + m_codecContext->codec->name).c_str());
 
 		// if the codec is not an audio codec, we are doing it wrong!
-		if (codecContext->codec->type != AVMEDIA_TYPE_AUDIO) throw FFmpegException(std::string("An audio output stream must be initialized with an audio codec").c_str());
+		if (m_codecContext->codec->type != AVMEDIA_TYPE_AUDIO) throw FFmpegException(std::string("An audio output stream must be initialized with an audio codec").c_str());
 
 		// set all data
-		codecContext->bit_rate = bitRate;
-		codecContext->sample_fmt = format;
-		codecContext->sample_rate = sampleRate;
+		m_codecContext->bit_rate = bitRate;
+		m_codecContext->sample_fmt = format;
+		m_codecContext->sample_rate = sampleRate;
 
 		// deduce the best channel layout from the codec
-		codecContext->channel_layout = select_channel_layout(codecContext->codec);
+		m_codecContext->channel_layout = select_channel_layout(m_codecContext->codec);
 
 		// finally the number of channels is derived from the layout
-		codecContext->channels = av_get_channel_layout_nb_channels(codecContext->channel_layout);
+		m_codecContext->channels = av_get_channel_layout_nb_channels(m_codecContext->channel_layout);
 
 		// default flags
-		codecContext->flags = 0;
+		m_codecContext->flags = 0;
 
 #ifdef DEBUG
         std::cout << "done ..." << "\n";
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/Codec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/Codec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/Codec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/Codec.cpp	2020-05-03 14:58:22.869928748 +0200
@@ -11,56 +11,60 @@
 	{
 		
 		AVCodec* codec = CodecDeducer::DeduceEncoder(codecName);
-		codecContext = LoadContext(codec);
+		m_codecContext = LoadContext(codec);
 	}
 
 
 	Codec::Codec(AVCodecID codecId)
 	{
 		AVCodec* codec = CodecDeducer::DeduceEncoder(codecId);
-		codecContext = LoadContext(codec);
+		m_codecContext = LoadContext(codec);
+#ifdef DEBUG
+                std::cerr << "codec " << avcodec_get_name(codecId) << " context loaded"  << "\n";
+#endif
+
 	}
 
 	void Codec::SetOption(const char* name, const char* value)
 	{
-		av_opt_set(codecContext->priv_data, name, value, 0);
+		av_opt_set(m_codecContext->priv_data, name, value, 0);
 	}
 
 	void Codec::SetOption(const char* name, int value)
 	{
-		av_opt_set_int(codecContext->priv_data, name, value, 0);
+		av_opt_set_int(m_codecContext->priv_data, name, value, 0);
 	}
 
 	void Codec::SetOption(const char* name, double value)
 	{
-		av_opt_set_double(codecContext->priv_data, name, value, 0);
+		av_opt_set_double(m_codecContext->priv_data, name, value, 0);
 	}
 
 	void Codec::SetGenericOption(const char* name, const char* value)
 	{
-		av_opt_set(codecContext, name, value, 0);
+		av_opt_set(m_codecContext, name, value, 0);
 	}
 
-	AVCodecContext* Codec::LoadContext(AVCodec* codec)
+	AVCodecContext* Codec::LoadContext(AVCodec* p_codec)
 	{
-		AVCodecContext* codecContext = avcodec_alloc_context3(codec);
-		if (!codecContext)
+		m_codecContext = avcodec_alloc_context3(p_codec);
+		if (!m_codecContext)
 		{
 			CleanUp();
-			throw FFmpegException(std::string("Could not allocate video codec context for codec " + string(codec->name)).c_str());
+			throw FFmpegException(std::string("Could not allocate video codec context for codec " + string(p_codec->name)).c_str());
 		}
 
 		// copy the type
-		codecContext->codec_type = codec->type;
+		m_codecContext->codec_type = p_codec->type;
 
-		return codecContext;
+		return m_codecContext;
 	}
 
 	void Codec::CleanUp()
 	{
-		if (codecContext != nullptr && !opened)
+		if (m_codecContext != nullptr && !opened)
 		{
-			avcodec_free_context(&codecContext);
+			avcodec_free_context(&m_codecContext);
 		}
 	}
 
@@ -71,7 +75,7 @@
 			throw FFmpegException(std::string("You can only open a codec once").c_str());
 		}
 
-		int ret = avcodec_open2(codecContext, codecContext->codec, NULL);
+		int ret = avcodec_open2(m_codecContext, m_codecContext->codec, NULL);
 		if (ret < 0)
 		{
 			throw FFmpegException(std::string("Could not open codecContext for codec").c_str(), ret);
@@ -82,7 +86,7 @@
                 std::cerr << "codec Context is open (ouf)"  << "\n";
 #endif
 
-		return new OpenCodec(codecContext);
+		return new OpenCodec(m_codecContext);
 	}
 
 	Codec::~Codec()
@@ -93,6 +97,6 @@
 	void Codec::SetGlobalContainerHeader()
 	{
 		if (opened) throw FFmpegException("This flag should be set before opening the codec");
-		codecContext->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
+		m_codecContext->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 	}
 }
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/Codec.h /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/Codec.h
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/Codec.h	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/Codec.h	2020-05-03 14:58:22.869928748 +0200
@@ -25,7 +25,7 @@
 
 	protected:
 
-		AVCodecContext* codecContext = nullptr;
+		AVCodecContext* m_codecContext;
 
 		OpenCodec* Open();
 
@@ -35,6 +35,6 @@
 
 		AVCodecContext* LoadContext(AVCodec* codec);
 
-		bool opened = false;
+		bool opened;
 	};
 }
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/JPGCodec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/JPGCodec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/JPGCodec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/JPGCodec.cpp	2020-05-01 20:42:14.995873449 +0200
@@ -8,7 +8,7 @@
 	{
 
 		// we take the default image format of the codec
-		codecContext->pix_fmt = codecContext->codec->pix_fmts[0];
+		m_codecContext->pix_fmt = m_codecContext->codec->pix_fmts[0];
 	}
 
 	void JPGCodec::SetCompressionLevel(int compressionLevel)
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/MJPEGCodec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/MJPEGCodec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/MJPEGCodec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/MJPEGCodec.cpp	2020-05-01 20:42:35.812419203 +0200
@@ -8,7 +8,7 @@
 //		: VideoCodec("mjpeg")
 	{
 
-		codecContext->pix_fmt = AV_PIX_FMT_YUVJ420P;
+		m_codecContext->pix_fmt = AV_PIX_FMT_YUVJ420P;
 	}
 
 // TODO : fixme, wrong parameters
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/PNGCodec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/PNGCodec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/PNGCodec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/PNGCodec.cpp	2020-05-01 20:43:05.473186448 +0200
@@ -8,7 +8,7 @@
 	{
 
 		// we take the default image format of the codec
-		codecContext->pix_fmt = codecContext->codec->pix_fmts[0];
+		m_codecContext->pix_fmt = m_codecContext->codec->pix_fmts[0];
 	}
 
 	void PNGCodec::SetCompressionLevel(int compressionLevel)
diff -Naur /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/VideoCodec.cpp /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/VideoCodec.cpp
--- /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2_previous/sources/Codecs/VideoCodec.cpp	2020-05-03 13:09:10.033024990 +0200
+++ /home/eric/Devel/minidart/miniDart_Gitlab/ffmpeg-cpp2/sources/Codecs/VideoCodec.cpp	2020-05-01 20:46:54.754772090 +0200
@@ -48,8 +48,8 @@
 	void VideoCodec::SetQualityScale(int /* qscale */)
 	{
 
-		codecContext->flags |= AV_CODEC_FLAG_QSCALE;
-		codecContext->global_quality = FF_QP2LAMBDA * 0;
+		m_codecContext->flags |= AV_CODEC_FLAG_QSCALE;
+		m_codecContext->global_quality = FF_QP2LAMBDA * 0;
 	}
 
 	bool VideoCodec::IsPixelFormatSupported(AVPixelFormat format)
@@ -63,7 +63,7 @@
 #endif
 		if (format == AV_PIX_FMT_NONE) return true; // let the codec deal with this
 
-		const enum AVPixelFormat *p = codecContext->codec->pix_fmts;
+		const enum AVPixelFormat *p = m_codecContext->codec->pix_fmts;
 		while (*p != AV_PIX_FMT_NONE)
 		{
 			if (*p == format) return true;
@@ -78,8 +78,8 @@
             std::cerr  << "I'm in : "<<  __func__ << "...  questionning framerate :  " <<  frameRate->num <<  " / " << frameRate->den << "\n";
 #endif
 
-		if (!codecContext->codec->supported_framerates) return true; // all frame rates are fair game
-		const AVRational *p = codecContext->codec->supported_framerates;
+		if (!m_codecContext->codec->supported_framerates) return true; // all frame rates are fair game
+		const AVRational *p = m_codecContext->codec->supported_framerates;
 		while (p->num)
 		{
 #ifdef DEBUG
@@ -99,51 +99,51 @@
 #endif
 
 		// sanity checks
-		if (!IsPixelFormatSupported(format)) throw FFmpegException(std::string("Pixel format " + string(av_get_pix_fmt_name(format)) + " is not supported by codec " + codecContext->codec->name).c_str());
+		if (!IsPixelFormatSupported(format)) throw FFmpegException(std::string("Pixel format " + string(av_get_pix_fmt_name(format)) + " is not supported by codec " + m_codecContext->codec->name).c_str());
 
                   std::cerr  <<  "IsPixelFormatSupported() done " << "\n";
 
-		if (!IsFrameRateSupported(frameRate)) throw FFmpegException(std::string("Frame rate " + to_string(frameRate->num) + "/" + to_string(frameRate->den) + " is not supported by codec " + codecContext->codec->name).c_str());
+		if (!IsFrameRateSupported(frameRate)) throw FFmpegException(std::string("Frame rate " + to_string(frameRate->num) + "/" + to_string(frameRate->den) + " is not supported by codec " + m_codecContext->codec->name).c_str());
 
                   std::cerr  <<  "IsFrameRateSupported() done " << "\n";
 
 		// if the codec is not an audio codec, we are doing it wrong!
-		if (codecContext->codec->type != AVMEDIA_TYPE_VIDEO) throw FFmpegException(std::string("A video output stream must be initialized with a video codec").c_str());
+		if (m_codecContext->codec->type != AVMEDIA_TYPE_VIDEO) throw FFmpegException(std::string("A video output stream must be initialized with a video codec").c_str());
 
 		// set everything & open
-		codecContext->width = width;
-		codecContext->height = height;
-		codecContext->pix_fmt = format;
+		m_codecContext->width = width;
+		m_codecContext->height = height;
+		m_codecContext->pix_fmt = format;
 
 		// FPS
 		AVRational time_base;
 		time_base.num = frameRate->den;
 		time_base.den = frameRate->num;
-		codecContext->time_base = time_base;
+		m_codecContext->time_base = time_base;
 		AVRational framerate;
 		framerate.num = frameRate->num;
 		framerate.den = frameRate->den;
-		codecContext->framerate = framerate;
+		m_codecContext->framerate = framerate;
 
 		return Codec::Open();
 	}
 
 	AVPixelFormat VideoCodec::GetDefaultPixelFormat()
 	{
-		const enum AVPixelFormat *p = codecContext->codec->pix_fmts;
-		if (*p == AV_PIX_FMT_NONE) throw FFmpegException(std::string("Codec " + string(codecContext->codec->name) + " does not have a default pixel format, you have to specify one").c_str());
+		const enum AVPixelFormat *p = m_codecContext->codec->pix_fmts;
+		if (*p == AV_PIX_FMT_NONE) throw FFmpegException(std::string("Codec " + string(m_codecContext->codec->name) + " does not have a default pixel format, you have to specify one").c_str());
 		return *p;
 	}
 
 	AVRational VideoCodec::GetClosestSupportedFrameRate(AVRational originalFrameRate)
 	{
-		if (!codecContext->codec->supported_framerates)
+		if (!m_codecContext->codec->supported_framerates)
 		{
 			// make up a frame rate - there is no supported frame rate
 			return originalFrameRate;
 		};
 
-		const AVRational *p = codecContext->codec->supported_framerates;
+		const AVRational *p = m_codecContext->codec->supported_framerates;
 		AVRational bestFrameRate;
 		bestFrameRate.num = 0;
 		bestFrameRate.den = 1;
